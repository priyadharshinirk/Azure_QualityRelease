trigger:

  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
name: Azure Pipelines
variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'MyServiceConnection196279'
  webAppName: 'Udacity-AppService'
stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      name: myAgentPool
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: terraform.tfvars

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '~/.ssh/known_hosts'
        sshPublicKey: $(PUBLIC_KEY)
        sshKeySecureFile: id_rsa.txt

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environment/test
      displayName: Copy terraform.tfvars

    - bash: |
        echo Pipeline workspace dir is $(Pipeline.Workspace)
        echo Terraform variable definition file is $(tfvardef.secureFilePath)
        cd $(Agent.TempDirectory)
        pwd
        ls -la
        cat id_rsa.pub
        cd 
        pwd
        ls -la
        cat known_hosts
        # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
        cd $(System.DefaultWorkingDirectory)  
        pwd
        ls -la
      displayName: Verify build environment (pre)

    # install Terraform Azure Pipelines Extension by Microsoft DevLabs
    # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
    # - task: TerraformInstaller@0
    #   displayName: Install Terraform
    #   inputs:
    #     terraformVersion: '0.203.0'
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'MyServiceConnection196279'
        backendServiceArm: 'MyServiceConnection196279'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'storage196279'
        backendAzureRmContainerName: 'storagecontainer196279'
        backendAzureRmKey: '+L5KZn+WvlTEhsX0AyHssVycrxfDvf8pnevLZbUyr3SETPqYf7iywzIttmcjYxKA4tiaJ/M+0jR+b0/wLa4wEg=='
    - task: TerraformTaskV2@2
      continueOnError: true
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'MyServiceConnection196279'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      name: myAgentPool
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    # - task: ArchiveFiles@2
    #   displayName: Archive Selenium
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
    #     verbose: true

    # - task: PublishPipelineArtifact@1
    #   displayName: Publish Selenium artifact
    #   inputs:
    #     targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
    #     artifactName: 'drop-selenium'

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      name: myAgentPool
    # environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy

  # - deployment: myLinuxVM
  #   displayName: Deploy Virtual Machine
  #   environment:
  #     name: 'TEST'
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - bash: |
  #             pwd
  #             hostname
  #             uname -a
  #             cat /etc/*-release
  #             sudo apt-get install software-properties-common -y
  #             sudo apt-add-repository universe -y
  #             sudo apt-get update -y
  #             sudo apt-get install python3-pip -y
  #             sudo apt-get install unzip -y
  #             sudo apt-get install -y chromium-browser
  #             sudo apt-get install -y chromium-chromedriver
  #             python3 -m pip install --upgrade pip
  #             pip3 install selenium
  #             python3 -V
  #             pip3 -V
  #             /usr/bin/chromium-browser --version
  #             /usr/bin/chromedriver --version
  #             python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
  #             # Install Log Analytics agent on Linux computers (only need to run once)
  #             # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
  #             # sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
  #             # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
  #           env:  # To use secret variables in a script, we must explicitly map them as environment variables.
  #             AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
  #             AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
  #           displayName: Configure selenium

- stage: Test
  jobs:
  - deployment: myLinuxVM
    displayName: Selenium Test on Virtual Machine
    # environment:
    #   name: 'TEST'
    #   resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              # Install and run selenium
              cd /home/devopsagent/myagent/_work/1/s
              wget https://chromedriver.storage.googleapis.com/101.0.4951.41/chromedriver_linux64.zip
              unzip chromedriver_linux64.zip
              sudo mv chromedriver /usr/bin/chromedriver
              sudo chown root:root /usr/bin/chromedriver
              pwd
              mkdir -p log/selenium
              python3 automatedtesting/selenium/login.py | sudo tee -a log/selenium/selenium-test.log-$(Build.BuildId)
            # cd $(Pipeline.Workspace)/drop-selenium
            # find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
            # unzip -o selenium-$(Build.BuildId).zip
            # pwd
            # ls -la
            # sudo mkdir -p /var/log/selenium
            # sudo chmod 664 /var/log/selenium
            # PATH="$PATH:automatedtesting/selenium/chromedriver.exe"
            # sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
            # # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
            # cd $(System.DefaultWorkingDirectory)
            # mkdir -p log/selenium
            # pwd
            # sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            # ls -la
            displayName: Run selenium tests
          - task: ArchiveFiles@2
            displayName: Archive Selenium report
            inputs:
              rootFolderOrFile: '/home/devopsagent/myagent/_work/1/s/log/selenium/selenium-test.log-$(Build.BuildId)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log-$(Build.BuildId).zip'
              verbose: true
          - bash: |
              # rm -rf /home/devopsagent/myagent/_work/1/s/log/selenium/selenium-test.log-$(Build.BuildId)
              cd log/selenium
              pwd
              ls -la
            displayName: Delete original Selenium reports
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium'
              artifactName: 'drop-selenium-logs'

          # - task: PublishPipelineArtifact@1
          #   displayName: Publish selenium logs
          #   inputs:
          #     targetPath: 'log/selenium/selenium-test.log'
          #     artifactName: 'drop-selenium-logs'
  - job: Jmeter
    pool:
      name: myAgentPool
    steps:
      - bash: |
          sudo apt-get install openjdk-11-jre-headless -y
          java -version
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.3.tgz -O jmeter.tgz
          tar xzvf jmeter.tgz
          apache-jmeter-5.4.3/bin/jmeter --version
          # create log directory
          mkdir -p log/jmeter
          pwd
          ls -la
        displayName: Install JMetert 

      - task: Bash@3
        displayName: 'Run Jmeter Stress test'
        inputs:
          targetType: 'inline'
          #failOnStderr: true
          script: |
            mkdir -p log/jmeter/Stress-test-html-report
            echo 'created folder'
            apache-jmeter-5.4.3/bin/jmeter -Gjmeter.save.saveservice.print_field_names=true  -n -t automatedtesting/jmeter/StressTest.jmx -f -l automatedtesting/jmeter/StressTestResult.csv -e -o log/jmeter/Stress-test-html-report
      - task: Bash@3
        displayName: 'Run Jmeter Endurance test'
        inputs:
          targetType: 'inline'
          #failOnStderr: true
          script: |
            mkdir -p log/jmeter/Endurance-test-html-report
            echo 'created folder'
            apache-jmeter-5.4.3/bin/jmeter -Gjmeter.save.saveservice.print_field_names=true  -n -t automatedtesting/jmeter/EnduranceTest.jmx -f -l automatedtesting/jmeter/EnduranceTestResult.csv -e -o log/jmeter/Endurance-test-html-report

      - task: ArchiveFiles@2
        displayName: Archive JMeter stress test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/Stress-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/Stress-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: ArchiveFiles@2
        displayName: Archive JMeter endurance test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/Endurance-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/Endurance-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - bash: |
          rm -rf log/jmeter/Stress-test-html-report
          rm -rf log/jmeter/Endurance-test-html-report
          cd log/jmeter
          pwd
          ls -la
        displayName: Delete original JMeter test HTML reports
      - task: PublishPipelineArtifact@1
        displayName: Publish JMeter logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
          artifactName: 'drop-jmeter-logs'

  - job: test_newman
    displayName: Test Postman (using Newman CLI)
    pool:
      name: myAgentPool
    steps: 
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - bash: |
        npm install -g newman
        newman --version
        # create log directory
        mkdir -p log/newman
        pwd
        ls -la
      displayName: Install Newman
    - bash: |
        newman run automatedtesting/postman/Regression_Test_Suite.json \
                   -e automatedtesting/postman/Test.postman_environment.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/regression-test.xml \
                   --suppress-exit-code
      displayName: Newman regression test
    - bash: |
        newman run automatedtesting/postman/Data_Validation_Test_Suite.json \
                    -e automatedtesting/postman/Test.postman_environment.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/validation-test.xml \
                   --suppress-exit-code
        ls -la $(System.DefaultWorkingDirectory)/log/newman/
      displayName: Newman validation test
    - task: PublishPipelineArtifact@1
      displayName: Publish Newman logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
        artifactName: 'drop-newman-logs'
    - task: PublishTestResults@2
      displayName: 'Publish Newman test results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Publish Newman test results'

- stage: Destroy
  jobs:
  - job: destroy_azure_infrastructure
    displayName: Destroy Azure Infrastructure
    pool:
      name: myAgentPool
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: terraform.tfvars

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '~/.ssh/known_hosts'
        sshPublicKey: $(PUBLIC_KEY)
        sshKeySecureFile: id_rsa.txt

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environment/test
      displayName: Copy terraform.tfvars

    - bash: |
        echo Pipeline workspace dir is $(Pipeline.Workspace)
        echo Terraform variable definition file is $(tfvardef.secureFilePath)
        cd $(Agent.TempDirectory)
        pwd
        ls -la
        cat id_rsa.txt.pub
        cd 
        pwd
        ls -la
        cat known_hosts
        cd ..
        # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
        cd $(System.DefaultWorkingDirectory)  
        pwd
        ls -la
        cd 
        cd /home/devopsagent/myagent/_work/1/s/log/selenium
        unzip -o selenium-test.log-$(Build.BuildId).zip -d seleniumlogs
        cd seleniumlogs
        sudo chmod 775 selenium-test.log-$(Build.BuildId)
      displayName: Verify build environment (post)

      # install Terraform Azure Pipelines Extension by Microsoft DevLabs
      # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    # - task: TerraformTaskV2@2
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
    #     environmentServiceNameAzureRM: 'MyServiceConnection196279'
    #     backendServiceArm: 'MyServiceConnection196279'
    #     backendAzureRmResourceGroupName: 'Azuredevops'
    #     backendAzureRmStorageAccountName: 'storage196279'
    #     backendAzureRmContainerName: 'storagecontainer196279'
    #     backendAzureRmKey: '+L5KZn+WvlTEhsX0AyHssVycrxfDvf8pnevLZbUyr3SETPqYf7iywzIttmcjYxKA4tiaJ/M+0jR+b0/wLa4wEg=='
    # - task: TerraformTaskV2@2
    #   continueOnError: true
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
    #     environmentServiceNameAzureRM: 'MyServiceConnection196279'
